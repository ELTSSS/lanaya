day13回顾
  自定义模块
      xxx.py
    导入方式:
      import 语句
      from import 语句
      from import * 语句
    搜索路径顺序
      1. 查找内建模块
      2. 查找当前工作路径
      3. 查找sys.path里指定的路径中
    xxx.py ---> xxx.pyc  ----> python3
    预置的变量(属性)
      __doc__  # 绑定文档字符串
      __name__ # 绑定模块名,当为主模块时绑定'__main__'
      __file__ # 绑定模块的文件路径名
    __all__ 列表
      __all__ = ['var1', 'var2']
      在用from import * 语句时,只导入列表中的变量(属性)
    隐藏属性
      以_开头的全局变量为隐藏属性
        from import * 语句

  包
    包含有一系列的模块或子文件夹

    导入语句
      绝对导入
        import 语句
            import mypack.games.contra [as c]
        from import 语句
            from mypack.games.contra import play
        from import * 语句
            from mypack.games.contra import *
      相对导入
        from . import context
        # mypack/games/contra.py 里 
        from ..office.word import *
      __init__.py
        实现包的内容
        __all__ 列表  限制from import *语句的操作

  两个模块
    sys模块
      sys.platform  # 操作系统平台的信息'linux', 'win32', 'darwin'
      sys.version / sys.version_info
      sys.argv   
      sys.path    # 模块的搜索路径
      sys.exit()  退出程序
      sys.getrecursionlimit()  # 得到最大的递归深度
      sys.setrecrusionlimit(v)  # 设置 

    random模块
      random.random()
      random.randint(a, b)
      ...






day14笔记
异常(基础)  Exception

什么是错误
  错误是指由于逻辑或语法等导致一个程序无法正常执行的问题

错误的特点:
  有些错误无法预知

什么是异常
  异常是程序出错时标识的一种状态
  当异常发生时,程序不会再向下执行.而转去调用此函数的地方处理
  此错误并恢复为正常状态

作用:
  用于信号,通知上层调用者有错误产生需要处理



try 语名的两种语法
  try-except 语句
  try-finally 语句

try-except 语句的语法
  try:
      可能触发异常的语句
  except 错误类型1 [as 变量1]:
      异常处理语句1
  except 错误类型2 [as 变量2]:
      异常处理语句2
  except (错误类型3, 错误类型4) [as 变量3]
      异常处理语句3
  ...
  except:
      异常处理语句other
  else:
      未发生异常的语句(此语句在末发生异常时执行)
  finally:
      最终语句(此语句在离开try时一定会被执行)

作用:
  偿式捕获异常,得到错错误类型4误通知,将程序由异常流程转为正常流程并继
  续执行
说明:
  as 子句是用于绑定错误对象的变量, 可以省略
  except 子句可以有一个或多个,但至少要有一个
  else 子句最多只能有一个,也可以省略不写
  finally 子句最多只能有一个.也可以省略不写
示例见:
  try_except.py
  try_except2.py
  try_except3.py
  try_except4.py
  try_except5.py
  try_except6.py


练习:
  写一个函数 get_score() 获取学生的成绩(0~100中的整数),
  如果用户输入的成绩不是0~100之间的数,则返回0
    如:
      def get_score():
          s = input("请输入成绩(0~100): ")
          ...

      score = get_score()
      print("学生的成绩是:" score)


python3 中内建的全局的错误类型
  参见文档:
    python_base_docs_html/python全部的异常类型.html


try-finally 语句
  语法:
    try:
        可能触发异常的语句
    finally:
        最终语句
  说明:
    finally 子句不可以省略
    一定不存在except子句
  作用:
    通常用try-finally语句来执行触发异常时一定要执行的语句,
      无论异常是否发生,finally 子句都会被执行
    try-finally 语句不会改变程序的(正常/异常)状态
  示例见:
    try_finally.py



raise 语句
  作用:
    触发一个错误,让程序进入异常状态
    发送错误通知给调用者
  语法:
    raise 异常类型
    或
    raise 异常对象
    或
    raise    # 重新触发上一次异常
  说明:
    raise 无参调用通常用于try-except 的except 子句中
  示例见:
    raise.py

练习:
  写一个函数 get_age() 用来获取一个人的年龄信息
    此函数规定用户只能输入1~140之间的整数,如果用户输入其它
    的数则直接触发ValueError 类型的错误
  如:
    def get_age():
        ...  # 此处自己实现

    try:
        age = get_age()
        print("用户输入的年龄是:", age)
    except ValueError as err:
        print("用户输入的不是1~140之间的整数!!!")


assert 语句(断言语句)
  语法:
    assert 真值表达式, 错误数据(通常是字符串)
  作用:
    主动检测错误并尽早触发错误
  说明:
    当真值表达式为False时,用错误数据创建一个AssertionError
    类型的错误,并进入异常状态
  等同于:
    if bool(真值表达式) == False:
        raise AssertionError(错误数据)
  示例见:
    assert.py


异常小结:
  四条异常处理语句:
    try-except 语句
       作用: 用来接收错误通知并处理错误(异常转正常)
    try-finally 语句
       作用: 执行必须要执行语句(不会转换程序的状态)
    raise 语句
       发送错误通知,让程序进入异常流程
    assert 语句
        根据条件发送AssertionError类型的异常通知,让程序
        进入异常流程


为什么要用异常处理机制
  在程序调用层数较深时,向主调函数传递错误信息需要层层return
  返回比较麻烦,所以需要异常处理机制
  示例见:
    except.py


迭代器 Iterator
  什么是迭代器
    迭代器是访问可迭代对象的工具
    迭代器是指用iter(obj) 函数返回的对象(实例)
    迭代器可以用next(it) 函数获取可迭代对象的数据

迭代器相关的函数
  iter(iterable)  从可迭代对象中返回一个迭代器,iterable
        必须是一个能提供迭代器的对象
  next(iterator)  从迭代器iterator 中获取下一个记录,如果
        无法获取下一条记录,则会触发StopIteration异常通知

  说明:
    迭代器只能往前取值,不会后退
    用iter函数可以返回一个可迭代对象的迭代器
  示例:
    L = [1, 3, 5, 7]
    it = iter(L)  # 从对象L中获取迭代器,然后用it变量绑定
    print(next(it))  # 1
    print(next(it))  # 3
    print(next(it))  # 5
    print(next(it))  # 7
    print(next(it))  # StopIteration 异常

    # 用迭代器访问range函数返回来的对象
    it = iter(range(1, 10, 3))
    print(next(it))  # 1
    print(next(it))  # 4
    print(next(it))  # 7
    print(next(it))  # StopIteration
  
  用迭代器函数iter和next 访问可迭代对象的示例见:
    iterator.py


练习:
  1. 有一个集合:
      s = {'唐僧', '悟空', '八戒', '沙僧'}
    用for语句遍历所有元素如下:
      for x in s:
          print(x)
      else:
          print("遍历结束")
    请将上面的for语句改写为while语句的迭代器实现

  2. 一个小球从100米高空落下,每次落地后反弹高度为原高度的一半
    再落下,
    1) 写程序算出皮球在第10次落地后反弹多高
    2) 打印出第10次反弹后小球经历的总路程

  3. 修改原学生信息管理程序,加入异常处理语句,让程序在任何情况
    下都能按逻辑正常执行,不至于崩溃
       如:输入年龄时输入非数字字符会崩溃)



